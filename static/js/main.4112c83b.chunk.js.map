{"version":3,"sources":["theme.js","client.js","config.js","components/HeaderText/styles.js","components/HeaderText/index.js","containers/Home/index.js","history.js","App.js","index.js"],"names":["theme","colors","fonts","httpLink","HttpLink","uri","credentials","afterwareLink","ApolloLink","operation","forward","map","response","token","getContext","headers","get","localStorage","setItem","middlewareLink","getItem","setContext","authorization","errorLink","onError","client","ApolloClient","cache","InMemoryCache","link","from","Container","styled","div","Header","h1","props","color","color2","HeaderText","text","text2","color1","Home","console","log","createBrowserHistory","App","history","basename","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"wPAOeA,EALD,CACZC,OAAQ,GACRC,MAAO,I,uCCGHC,EAAW,IAAIC,IAAS,CAC5BC,ICPY,gCDQZC,YAAa,YAITC,EAAgB,IAAIC,KAAW,SAACC,EAAWC,GAAZ,OAAwBA,EAAQD,GAClEE,KAAI,SAAAC,GAAa,IAEVC,EAD4BJ,EAAUK,aAApCF,SAAYG,QACEC,IAAI,WAM1B,OAJIH,GACFI,aAAaC,QAAQ,QAASL,GAGzBD,QAGLO,EAAiB,IAAIX,KAAW,SAACC,EAAWC,GAChD,IAAMG,EAAQI,aAAaG,QAAQ,SASnC,OARIP,GACFJ,EAAUY,WAAW,CACnBN,QAAS,CACPO,cAAc,UAAD,OAAYT,MAKxBH,EAAQD,MAGXc,EAAYC,aAAQ,eAeXC,EAVA,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,KAAMrB,IAAWsB,KAAK,CACpBP,EACAhB,EACAY,EACAhB,M,qrBE/CG,IAAM4B,EAAYC,IAAOC,IAAV,KAUTC,EAASF,IAAOG,GAAV,KAGR,SAAAC,GAAK,OAAIA,EAAMC,SAEb,SAAAD,GAAK,OAAIA,EAAME,UCCbC,GDOcP,IAAOC,IAAV,KCnBP,SAAC,GAAD,IACjBO,EADiB,EACjBA,KAAMC,EADW,EACXA,MAAOC,EADI,EACJA,OAAQJ,EADJ,EACIA,OADJ,OAGjB,kBAACP,EAAD,KACE,kBAACG,EAAD,CAAQG,MAAOK,EAAQJ,OAAQA,GAC5BE,EACA,IACAC,GAAS,8BAAOA,OCARE,EAVF,WAEX,OADAC,QAAQC,IAAI,iBAEV,oCACE,kBAAC,EAAD,CAAYL,KAAK,cAAcE,OAAO,Y,OCL7BI,gBCmBAC,EAZH,kBACV,kBAAC,IAAD,CAAeC,QAASA,EAASC,SAAS,UACxC,kBAAC,IAAD,CAAejD,MAAOA,GACpB,kBAAC,IAAD,CAAgByB,OAAQA,GACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,IAAIC,UAAWT,S,MCT3CU,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.4112c83b.chunk.js","sourcesContent":["// Add global styles and fonts here\n\nconst theme = {\n  colors: {},\n  fonts: {},\n}\n\nexport default theme\n","import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { onError } from 'apollo-link-error'\nimport { ApolloLink } from 'apollo-link'\nimport config from './config'\n\nconst httpLink = new HttpLink({\n  uri: config.graphqlUrl,\n  credentials: 'include',\n})\n\n\nconst afterwareLink = new ApolloLink((operation, forward) => forward(operation)\n  .map(response => {\n    const { response: { headers } } = operation.getContext()\n    const token = headers.get('x-token')\n\n    if (token) {\n      localStorage.setItem('token', token)\n    }\n\n    return response\n  }))\n\nconst middlewareLink = new ApolloLink((operation, forward) => {\n  const token = localStorage.getItem('token')\n  if (token) {\n    operation.setContext({\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    })\n  }\n\n  return forward(operation)\n})\n\nconst errorLink = onError(() => {\n  // Handle specific errors here\n  //   e.g. redirect to login on AuthenticationError\n})\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: ApolloLink.from([\n    errorLink,\n    afterwareLink,\n    middlewareLink,\n    httpLink,\n  ]),\n})\n\nexport default client\n","export default {\n  graphqlUrl: 'http://localhost:5000/graphql',\n}\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 5vw 0 0 0;\n  @media (max-width: 780px) {\n    margin: 30px 0 0 0;\n  }\n`\n\nexport const Header = styled.h1`\n  font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\";\n  font-size: 48px;\n  color: ${props => props.color};\n  span {\n    color: ${props => props.color2}\n  }\n  margin-bottom: 0;\n  @media (max-width: 780px) {\n    font-size: 38px;\n  }\n`\n\nexport const TextContainer = styled.div`\n  display: flex;\n`\n","import React from 'react'\nimport {\n  Header, Container,\n} from './styles'\n\n\nconst HeaderText = ({\n  text, text2, color1, color2,\n}) => (\n  <Container>\n    <Header color={color1} color2={color2}>\n      {text}\n      {' '}\n      {text2 && <span>{text2}</span>}\n    </Header>\n  </Container>\n)\n\nexport default HeaderText\n","import React from 'react'\nimport HeaderText from '../../components/HeaderText'\n\nconst Home = () => {\n  console.log('home rendered')\n  return (\n    <>\n      <HeaderText text=\"Coming Soon\" color1=\"black\" />\n    </>\n  )\n}\n\n\nexport default Home\n","import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory()\n","import React from 'react'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\nimport { ThemeProvider } from 'styled-components'\nimport theme from './theme'\nimport client from './client'\nimport Home from './containers/Home'\nimport history from './history'\n\nconst App = () => (\n  <BrowserRouter history={history} basename=\"/React\">\n    <ThemeProvider theme={theme}>\n      <ApolloProvider client={client}>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n        </Switch>\n      </ApolloProvider>\n    </ThemeProvider>\n  </BrowserRouter>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}